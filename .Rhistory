mean.tone = `mean(Tone)`
)
big_df <- merge(con_df, graph_df, by = 'thread')
big_df <- arrange(big_df, desc(posts))
temp <- big_df[1:6,5:8]
# rounding and changing temp values to integers
temp <- round(temp, 0)
temp$mean.analytic <- as.integer(temp$mean.analytic)
temp$mean.clout <- as.integer(temp$mean.clout)
temp$mean.authentic <- as.integer(temp$mean.authentic)
temp$mean.tone <- as.integer(temp$mean.tone)
# renaming columns for aesthetics
temp <- as_tibble(temp)
temp <- temp %>%
rename(
Analytic = mean.analytic,
Clout = mean.clout,
Authentic = mean.authentic,
Tone = mean.tone
)
# instantiate df for graph
rad_df <- rbind(rep(100, 4), rep(20, 4), temp)
# assign colour, title and par screen
border <- colour_palette
fill <- colour_palette_a
title <- big_df[1:6,1]
par(mar=rep(0.8,4))
par(mfrow=c(2,3))
# add loop for each plot and customise look
for(i in 1:6){
radarchart(rad_df[c(1,2,i+2),], axistype=1, seg = 5,
pcol=border[i] , pfcol=fill[i] ,
plwd=4, plty=1, cglcol="grey", cglty=1,
axislabcol="grey", caxislabels=seq(0,100,20),
cglwd=0.9, vlcex=0.9, title=title[i])
}
################[part 2c]#################
df$year <- floor_date(df$newdate, "year")
df$year <- format(as.Date(df$year, format = "d-%m-%y-"),"%Y")
year.analytic <- (df %>% group_by(ThreadID, year) %>%
summarise(mean(Analytic)))
year.clout <- (df %>% group_by(ThreadID, year) %>%
summarise(mean(Clout)))
year.authentic <- (df %>% group_by(ThreadID, year) %>%
summarise(mean(Authentic)))
year.tone <- (df %>% group_by(ThreadID, year ) %>%
summarise(mean(Tone)))
temp1 <- merge(year.analytic, year.clout)
temp2 <- merge(temp1, year.authentic)
temp3 <- merge(temp2, year.tone)
year_df <- as_tibble(temp3)
year_df <- year_df %>%
rename(
thread = ThreadID,
mean.analytic = `mean(Analytic)`,
mean.clout = `mean(Clout)`,
mean.authentic = `mean(Authentic)`,
mean.tone = `mean(Tone)`
)
year_df$year <- as.integer(as.character(year_df$year, format = "%Y"))
pip_df <- merge(year_df, con_df, by = 'thread')
pip_df <- arrange(pip_df, desc(posts))
ggplot(pip_df[1:30,], aes(x = year)) +
geom_point(aes(y = mean.analytic), color = "#051C2C", size = 2) +
geom_line(aes(y = mean.analytic), color = "#051C2C", size = 1) +
geom_point(aes(y = mean.clout), color = "#8ACBDD", size = 2) +
geom_line(aes(y = mean.clout), color = "#8ACBDD", size = 1) +
geom_point(aes(y = mean.authentic), color = "#2944C2", size = 2) +
geom_line(aes(y = mean.authentic), color = "#2944C2", size = 1) +
geom_point(aes(y = mean.tone), color = "#0F90CB", size = 2) +
geom_line(aes(y = mean.tone), color = "#0F90CB", size = 1) +
facet_wrap(~thread, ncol = 4, 2) +
labs(x = "Data by year", y = "Average proportion", title = 'Language used by top threads over time') +
theme_ipsum_ps()
################[part 3a]#################
df$month <- floor_date(df$newdate, "month")
# graphing networks for each month. Note each month must be manually added as a string in the first line of code below
month <- df %>% filter(as.character(df$month) == '2011-06-01')
month <- month[c(1,2, length(month))]
month <- merge(month, month, by = "ThreadID")
g_df <- cbind(month$AuthorID.x, month$AuthorID.y)
graph <- graph_from_data_frame(g_df, directed = F)
graph <- simplify(graph, remove.multiple = T, remove.loops = T)
deg <- degree(graph, mode="all")
tkplot(graph, vertex.size=deg*2, vertex.color='#8ACBDD')
#942 540
# establish colour palette with alpha for assignment
colour_palette <-  colormap(colormap=c("#051C2C","#3F849B", "#2944C2", "#8ACBDD", "#0F90CB", "#5B9BD5", "#A5AFE4"), nshades = 12)
colour_palette_a <- colormap(colormap=c("#051C2C","#8ACBDD", "#2944C2", "#3F849B", "#0F90CB", "#5B9BD5", "#A5AFE4"), nshades = 12, alpha = 0.3)
ggplot(melt_df, aes(x = variable, y = value, fill = variable)) +
geom_violin(trim = F,  size = 1.5, colour = "#051C2C") +
labs(title = "Summary statistics and density of thread posts and users", x = "Variable", y = "Number") +
geom_boxplot(width = 0.1, fill = 'white', size = 1, ) +
stat_summary(fun.y = mean, geom = 'point', shape = 23, size = 3,  fill = "#2944C2") +
scale_y_continuous(limits = c(0, 62.5)) +
scale_fill_manual(values = colour_palette) +
theme_ipsum_ps()
ggplot(melt_df, aes(x = variable, y = value, fill = variable)) +
geom_violin(trim = F,  size = 1.5, colour = "#051C2C") +
labs(title = "Summary statistics and density of thread posts and users", x = "Variable", y = "Number") +
geom_boxplot(width = 0.1, fill = 'white', size = 1, ) +
stat_summary(fun.y = mean, geom = 'point', shape = 23, size = 3,  fill = "#2944C2") +
scale_y_continuous(limits = c(0, 62.5)) +
#scale_fill_manual(values = colour_palette) +
theme_ipsum_ps()
# establish colour palette with alpha for assignment
colour_palette <-  colormap(colormap=c("#051C2C","#8ACBDD", "#2944C2", "#3F849B", "#0F90CB", "#5B9BD5", "#A5AFE4"), nshades = 12)
ggplot(melt_df, aes(x = variable, y = value, fill = variable)) +
geom_violin(trim = F,  size = 1.5, colour = "#051C2C") +
labs(title = "Summary statistics and density of thread posts and users", x = "Variable", y = "Number") +
geom_boxplot(width = 0.1, fill = 'white', size = 1, ) +
stat_summary(fun.y = mean, geom = 'point', shape = 23, size = 3,  fill = "#2944C2") +
scale_y_continuous(limits = c(0, 62.5)) +
scale_fill_manual(values = c("A5AFE4","#8ACBDD")) +
theme_ipsum_ps()
ggplot(melt_df, aes(x = variable, y = value, fill = variable)) +
geom_violin(trim = F,  size = 1.5, colour = "#051C2C") +
labs(title = "Summary statistics and density of thread posts and users", x = "Variable", y = "Number") +
geom_boxplot(width = 0.1, fill = 'white', size = 1, ) +
stat_summary(fun.y = mean, geom = 'point', shape = 23, size = 3,  fill = "#2944C2") +
scale_y_continuous(limits = c(0, 62.5)) +
#scale_fill_manual(values = c("A5AFE4","#8ACBDD")) +
theme_ipsum_ps()
ggplot(melt_df, aes(x = variable, y = value, fill = variable)) +
geom_violin(trim = F,  size = 1.5, colour = "#051C2C") +
labs(title = "Summary statistics and density of thread posts and users", x = "Variable", y = "Number") +
geom_boxplot(width = 0.1, fill = 'white', size = 1, ) +
stat_summary(fun.y = mean, geom = 'point', shape = 23, size = 3,  fill = "#2944C2") +
scale_y_continuous(limits = c(0, 62.5)) +
scale_fill_manual(values = c("#A5AFE4","#8ACBDD")) +
theme_ipsum_ps()
ggplot(melt_df, aes(x = variable, y = value, fill = variable)) +
geom_violin(trim = F,  size = 1.5, colour = "#051C2C") +
labs(title = "Summary statistics and density of thread posts and users", x = "Variable", y = "Number", fill = "Variable") +
geom_boxplot(width = 0.1, fill = 'white', size = 1, ) +
stat_summary(fun.y = mean, geom = 'point', shape = 23, size = 3,  fill = "#2944C2") +
scale_y_continuous(limits = c(0, 62.5)) +
scale_fill_manual(values = c("#A5AFE4","#8ACBDD")) +
theme_ipsum_ps()
melt_df
ggplot(melt_df, aes(x = variable, y = value, fill = variable)) +
geom_violin(trim = T,  size = 1.5, colour = "#051C2C") +
labs(title = "Summary statistics and density of thread posts and users", x = "Variable", y = "Number", fill = "Variable") +
geom_boxplot(width = 0.1, fill = 'white', size = 1, ) +
stat_summary(fun.y = mean, geom = 'point', shape = 23, size = 3,  fill = "#2944C2") +
scale_y_continuous(limits = c(0, 62.5)) +
scale_fill_manual(values = c("#A5AFE4","#8ACBDD")) +
theme_ipsum_ps()
ggplot(melt_df, aes(x = variable, y = value, fill = variable)) +
geom_violin(trim = Y,  size = 1.5, colour = "#051C2C") +
labs(title = "Summary statistics and density of thread posts and users", x = "Variable", y = "Number", fill = "Variable") +
geom_boxplot(width = 0.1, fill = 'white', size = 1, ) +
stat_summary(fun.y = mean, geom = 'point', shape = 23, size = 3,  fill = "#2944C2") +
scale_y_continuous(limits = c(0, 62.5)) +
scale_fill_manual(values = c("#A5AFE4","#8ACBDD")) +
theme_ipsum_ps()
ggplot(melt_df, aes(x = variable, y = value, fill = variable)) +
geom_violin(trim = Y,  size = 1.5, colour = "#051C2C") +
labs(title = "Summary statistics and density of thread posts and users", x = "Variable", y = "Number", fill = "Variable") +
geom_boxplot(width = 0.1, fill = 'white', size = 1, ) +
stat_summary(fun.y = mean, geom = 'point', shape = 23, size = 3,  fill = "#2944C2") +
scale_y_continuous(limits = c(0, 62.5)) +
scale_fill_manual(values = c("#A5AFE4","#8ACBDD")) +
theme_ipsum_ps()
ggplot(melt_df, aes(x = variable, y = value, fill = variable)) +
geom_violin(trim = F,  size = 1.5, colour = "#051C2C") +
labs(title = "Summary statistics and density of thread posts and users", x = "Variable", y = "Number", fill = "Variable") +
geom_boxplot(width = 0.1, fill = 'white', size = 1, ) +
stat_summary(fun.y = mean, geom = 'point', shape = 23, size = 3,  fill = "#2944C2") +
scale_y_continuous(limits = c(0, 62.5)) +
scale_fill_manual(values = c("#A5AFE4","#8ACBDD")) +
theme_ipsum_ps()
# calculating thread concentration by post
sum(con_df[1:10,3]) / count(df)
sum(con_df[1:30,3]) / count(df)
month <- df %>% filter(as.character(df$month) == '2011-07-01')
month <- month[c(1,2, length(month))]
month <- merge(month, month, by = "ThreadID")
g_df <- cbind(month$AuthorID.x, month$AuthorID.y)
graph <- graph_from_data_frame(g_df, directed = F)
graph <- simplify(graph, remove.multiple = T, remove.loops = T)
deg <- degree(graph, mode="all")
tkplot(graph, vertex.size=deg*2, vertex.color='#8ACBDD')
month <- df %>% filter(as.character(df$month) == '2011-07-01')
month <- month[c(1,2, length(month))]
month <- merge(month, month, by = "ThreadID")
g_df <- cbind(month$AuthorID.x, month$AuthorID.y)
graph <- graph_from_data_frame(g_df, directed = F)
graph <- simplify(graph, remove.multiple = T, remove.loops = T)
deg <- degree(graph, mode="all")
tkplot(graph, vertex.size=deg*2, vertex.color='#5B9BD5')
# graphing networks for each month. Note each month must be manually added as a string in the first line of code below
month <- df %>% filter(as.character(df$month) == '2011-07-01')
month <- month[c(1,2, length(month))]
month <- merge(month, month, by = "ThreadID")
g_df <- cbind(month$AuthorID.x, month$AuthorID.y)
graph <- graph_from_data_frame(g_df, directed = F)
graph <- simplify(graph, remove.multiple = T, remove.loops = T)
deg <- degree(graph, mode="all")
tkplot(graph, vertex.size=deg*2, vertex.color='#A5AFE4')
ggplot(data = tile_filt, aes(x=Var1, y=Var2, fill=value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "#2944C2", mid = "#FFFFFF", high = "#2944C2", limits = c(-1, 1)) +
labs(x = "Variables", y = "Variables", title = "Correlation between summary linguistic variables", colour = "Correlation") +
theme_ipsum_ps()
ggplot(data = tile, aes(x=Var1, y=Var2, fill=value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "#2944C2", mid = "#FFFFFF", high = "#2944C2", limits = c(-1, 1)) +
labs(x = "Variables", y = "Variables", title = "Correlation between linguistic variables", colour = "Correlation") +
theme_ipsum_ps() +
theme(axis.text.x = element_text(angle = 90))
month <- df %>% filter(as.character(df$month) == '2011-08-01')
month <- month[c(1,2, length(month))]
month <- merge(month, month, by = "ThreadID")
g_df <- cbind(month$AuthorID.x, month$AuthorID.y)
graph <- graph_from_data_frame(g_df, directed = F)
graph <- simplify(graph, remove.multiple = T, remove.loops = T)
deg <- degree(graph, mode="all")
tkplot(graph, vertex.size=deg*2, vertex.color='#3F849B')
month <- df %>% filter(as.character(df$month) == '2011-09-01')
month <- month[c(1,2, length(month))]
month <- merge(month, month, by = "ThreadID")
g_df <- cbind(month$AuthorID.x, month$AuthorID.y)
graph <- graph_from_data_frame(g_df, directed = F)
graph <- simplify(graph, remove.multiple = T, remove.loops = T)
deg <- degree(graph, mode="all")
tkplot(graph, vertex.size=deg*2, vertex.color='#3F849B')
# graphing networks for each month. Note each month must be manually added as a string in the first line of code below
month <- df %>% filter(as.character(df$month) == '2011-10-01')
month <- month[c(1,2, length(month))]
month <- merge(month, month, by = "ThreadID")
g_df <- cbind(month$AuthorID.x, month$AuthorID.y)
graph <- graph_from_data_frame(g_df, directed = F)
graph <- simplify(graph, remove.multiple = T, remove.loops = T)
deg <- degree(graph, mode="all")
tkplot(graph, vertex.size=deg*2, vertex.color='#3F849B')
# graphing networks for each month. Note each month must be manually added as a string in the first line of code below
month <- df %>% filter(as.character(df$month) == '2011-06-01')
month <- month[c(1,2, length(month))]
month <- merge(month, month, by = "ThreadID")
g_df <- cbind(month$AuthorID.x, month$AuthorID.y)
graph <- graph_from_data_frame(g_df, directed = F)
graph <- simplify(graph, remove.multiple = T, remove.loops = T)
deg <- degree(graph, mode="all")
tkplot(graph, vertex.size=deg*2, vertex.color='#8ACBDD')
con_df
iris
aggregate(iris[1:4], iis[5], mean)
aggregate(iris[1:4], iris[5], mean)
aggregate(iris[1:4], iris[5], sum)
aggregate(iris[1:4], iris[5], median)
aggregate(iris[1], iris[5], median)
by(iris, iris[5], function(df) cor(df[1], df[2])
by(iris, iris[5], function(df) cor(df[1], df[2]))
by(iris, iris[5], function(df) cor(df[1], df[2]))
by(iris, iris[5], function(df) sum(df[1], df[2]))
by(iris, iris[2], function(df) sum(df[3], df[2]))
by(iris, iris[2], function(df) count(df[3], df[2]))
by(iris, iris[2], function(df) mean(df[3], df[2]))
by(iris, iris[5], function(df) mean(df[3], df[2]))
by(iris, iris[5], function(df) mean(df[3], df[2]))
by(iris, iris[5], function(df) average(df[3], df[2]))
by(iris, iris[5], function(df) cor(df[3], df[2]))
max.type <- by(iris, iris[5], function(df) df[which.max(df[,3]),])
max.type
do.call(rbind, max.type)
as.data.frame(do.call(rbind, max.type))
by(iris, iris[5], function(df) cor(df[3], df[2]))
max.type <- by(iris, iris[5], function(df) df[which.max(df[,3]),])
max.type
as.data.frame(do.call(rbind, max.type))
library(igraph)
g <- graph.formula(1-2, 2-4, 4-3, 4-6, 6-5, 6-7, 7-5)
table(sapply(cliques(g), length)
table(sapply(cliques(g), length))
table(sapply(cliques(g), length))
betweenness(g)
degree(g)
g <- graph.formula(1-2, 2-4, 4-3, 4-6, 6-5, 6-7, 7-5)
plot(g)
degree(g)
betweenness(g)
format(closeness(g), digits = 2)
get.adjacency(g)
diameter(g)
average.path.length(g)
table(sapply(cliques(g), length))
iris
aggregate(iris[1], iris[5], median)
g <- graph.formula(a-c, c-d)
betweenness(g)
g <- graph.formula(a-c, c-d, c-b, c-e, b-d, e-f)
plot(g)
degree(g)
betweenness(g)
format(closeness(g), digits = 2)
average.path.length(g)
diameter(g)
table(sapply(cliques(g), length))
cliques(g)
table(sapply(cliques(g), length))
# eliminate categorical variables
df.mm <- model.matrix(~Month+Location+WindGustDir+WindDir9am+WindDir3pm+RainToday+RainTomorrow, data = df)
# ------------------------------------------------------------------------------------------------------
# 4.4
lasso.fit = cv.glmnet.f(DIABETES ~ ., pima.train, family="binomial")
rm(list=ls())
source("wrappers.R")
source("my.prediction.stats.R")
library(glmnet)
pima.train = read.csv("pima.train.csv")
pima.test = read.csv("pima.test.csv")
# ------------------------------------------------------------------------------------------------------
# 4.1
lasso.fit = glmnet.f(DIABETES ~ ., pima.train, family="binomial", lambda = 0)
my.pred.stats(predict.glmnet.f(lasso.fit, pima.test, type="response"), pima.test$DIABETES)
coefficients(lasso.fit)
# Gives essentially the same model as using glm() -- this is because for lambda = 0
# we have no penalisation.
# ------------------------------------------------------------------------------------------------------
# 4.2
lasso.fit = glmnet.f(DIABETES ~ ., pima.train, family="binomial", lambda = 0.02)
coefficients(lasso.fit)
sum(coefficients(lasso.fit) != 0)
lasso.fit = glmnet.f(DIABETES ~ ., pima.train, family="binomial", lambda = 0.03)
coefficients(lasso.fit)
sum(coefficients(lasso.fit) != 0)
lasso.fit = glmnet.f(DIABETES ~ ., pima.train, family="binomial", lambda = 0.05)
coefficients(lasso.fit)
sum(coefficients(lasso.fit) != 0)
# As lambda increases, the degree of penalisation in our lasso equation (see Lecture 8) increases,
# and we can see that the magnitude of the coefficients gets smaller and smaller (are shrunken towards zero).
# Remembering that the larger the coefficient, the stronger the association and the
# more the coefficient "fits" the data, we see that increasing the penalisation reduces
# the fit of the model to the data -- and therefore reduces the complexity.
#
# Note, in particular, that as lambda increases, some of the predictors are actually shrunken so much towards
# zero that they are removed from the model. For lambda = 0.02, INS is removed from the model; for lambda = 0.03
# BP and INS are removed, and for lambda = 0.05 then BP, INS, SKIN and PED are all removed.
# ------------------------------------------------------------------------------------------------------
# 4.3
lasso.fit = glmnet.f(DIABETES ~ ., pima.train, family="binomial")
plot(lasso.fit, "lambda", label=T)
# The plot shows the "coefficient path" as lambda changes.
# By tracing along the lines we can see how the coefficients change for the different values of lambda
# Take the black line for example -- this is PED (variable 7 in our dataset) and has a value of approximately 0.8 when lambda = 0.
# As lambda increases, it progressively shrinks towards zero, and is eventually removed
# at around log(lambda) = -2.8. We note that after it is removed, three variables still remain in the model
# and are eventually shrunk to zero as the log(lambda) approaches -1.
# ------------------------------------------------------------------------------------------------------
# 4.4
lasso.fit = cv.glmnet.f(DIABETES ~ ., pima.train, family="binomial")
plot(lasso.fit)
# ------------------------------------------------------------------------------------------------------
# 4.5
coefficients(lasso.fit)
my.pred.stats(predict.glmnet.f(lasso.fit, pima.test, type="response"), pima.test$DIABETES)
pima.test$DIABETES
levels(pima.test$DIABETES)
prob = predict.glmnet.f(lasso.fit, pima.test, type="response")
target = pima.test$DIABETES
level(target)
levels(target)
factor(prob > 1/2, c(F,T), classes)
factor(prob > 1/2, c(F,T), levels(target))
??factor
rm(list = ls())
setwd("C:\\Users\\Tom Orlando\\Monash\\FIT3164")
install.packages("caret")
install.packages("randomForest")
install.packages("funModeling")
install.packages("tidyverse")
install.packages("GA")
library(caret)
library(randomForest)
library(funModeling)
library(tidyverse)
library(GA)
source('./models/feature_selection/genetic_algorithm/wrappers.R')
# Importing training dataset of which we will find
df <- read.csv('./data/heart_train.csv')
df.x <- select(df, -CAD_Yes)
library(caret)
library(randomForest)
library(funModeling)
library(tidyverse)
library(GA)
source('./models/feature_selection/genetic_algorithm/wrappers.R')
# Importing training dataset of which we will find
df <- read.csv('./data/heart_train.csv')
df.x <- select(df, -CAD_Yes)
df.y <- df$CAD_Yes
df.y <- df$CAD_Yes
df.x <- select(df, -CAD_Yes)
df.x <- df[,:-1]
df.x <- df[,:]
df.x <- df[,-1]
df.x
length(df)
df.x <- df[,length(df)]
df.x
df.x <- df[,-length(df)]
df.x
df.y <- df$CAD_Yes
num_vars <- ncol(df)
df.y <- as.factor(df$CAD_Yes)
df.y
num_vars <- ncol(df)
var_names <- colnames(df)
ga_main <- ga(fitness = function(vars) custom_fitness(vars = vars,
data_x = df.x,
data_y = df.y,
p_sampling = 0.7),
type = "binary",
crossover = gabin_uCrossover,
elitism = 3,
pmutation = 0.03,
popSize = 50,
nBits = num_vars,
names = var_names,
run = 5,
maxiter = 50,
monitor = plot,
keepBest = TRUE,
#parallel = TRUE,
seed = 28009592
)
ga_main <- ga(fitness = function(vars) custom_fitness(vars = vars,
data_x = df.x,
data_y = df.y,
p_sampling = 0.7),
type = "binary",
crossover = gabin_uCrossover,
elitism = 3,
pmutation = 0.03,
popSize = 50,
nBits = num_vars,
names = var_names,
run = 5,
maxiter = 50,
monitor = plot,
keepBest = TRUE,
#parallel = TRUE,
seed = 28009592
)
custom_fitness <- function(vars, data_x, data_y, p_sampling){
# speeding up things with sampling
ix=get_sample(data_x, percentage_tr_rows = p_sampling)
data_2=data_x[ix,]
data_y_smp=data_y[ix]
# keep only vars from current solution
names=colnames(data_2)
names_2=names[vars==1]
# get the columns of the current solution
data_sol=data_2[, names_2]
# get the roc value from the created model
roc_value=get_roc_metric(data_sol, data_y_smp, names_2)
# get the total number of vars for the current selection
q_vars=sum(vars)
# time for your magic
fitness_value=roc_value/q_vars
return(fitness_value)
}
df <- read.csv('./data/heart_train.csv')
df.x <- df[,-length(df)]
df.y <- df$CAD_Yes
df.y <- as.factor(df$CAD_Yes)
custom_fitness(vars = vars,
data_x = df.x,
data_y = df.y,
p_sampling = 0.7)
vars
ga_main <- ga(fitness = function(vars) custom_fitness(vars = vars,
data_x = df.x,
data_y = df.y,
p_sampling = 0.7),
type = "binary",
crossover = gabin_uCrossover,
elitism = 3,
pmutation = 0.03,
popSize = 50,
nBits = num_vars,
names = var_names,
run = 5,
maxiter = 50,
monitor = plot,
keepBest = TRUE,
#parallel = TRUE,
seed = 28009592
)
df.x <- df[,-length(df)]
df.y <- as.factor(df$CAD_Yes)
num_vars <- ncol(df.x)
var_names <- colnames(df.x)
ga_main <- ga(fitness = function(vars) custom_fitness(vars = vars,
data_x = df.x,
data_y = df.y,
p_sampling = 0.7),
type = "binary",
crossover = gabin_uCrossover,
elitism = 3,
pmutation = 0.03,
popSize = 50,
nBits = num_vars,
names = var_names,
run = 5,
maxiter = 50,
monitor = plot,
keepBest = TRUE,
#parallel = TRUE,
seed = 28009592
)
